<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2651560750.github.io</id>
    <title>Gridea</title>
    <updated>2021-04-07T12:41:07.985Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2651560750.github.io"/>
    <link rel="self" href="https://2651560750.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://2651560750.github.io/images/avatar.png</logo>
    <icon>https://2651560750.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[网络编程学习之URL下载网络资源]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-url-xia-zai-wang-luo-zi-yuan/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-url-xia-zai-wang-luo-zi-yuan/">
        </link>
        <updated>2021-04-07T12:05:05.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2651560750.github.io/post-images/1617799257161.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之多线程在线质询]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-duo-xian-cheng-zai-xian-zhi-xun/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-duo-xian-cheng-zai-xian-zhi-xun/">
        </link>
        <updated>2021-04-07T11:21:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="发信息">发信息</h1>
<pre><code>package com.deng.Talk;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketException;

public class TalkSend implements Runnable{
    DatagramSocket socket=null;
    BufferedReader reader=null;
    private int fromport;
    private String toip;
    private int toport;

    public TalkSend(int fromport, String toip, int toport) {
        this.fromport = fromport;
        this.toip = toip;
        this.toport = toport;
        try {
            socket=new DatagramSocket(fromport);
            reader=new BufferedReader(new InputStreamReader(System.in));
        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        while (true)
        {
            try {
                String string=reader.readLine();
                byte[] buffer=string.getBytes();
                DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length,new InetSocketAddress(this.toip,this.toport));
                socket.send(datagramPacket);
                if (string.equals(&quot;bye&quot;))
                {
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        socket.close();
    }
}
</code></pre>
<h1 id="收信息">收信息</h1>
<pre><code>package com.deng.Talk;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

public class Talkreceive implements Runnable{
    DatagramSocket socket=null;
    private int port;
private String fromstring;
    public Talkreceive(int port,String fromstring) {
        this.port = port;
        this.fromstring=fromstring;
        try {
            socket=new DatagramSocket(port);
        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        while (true)
        {
            try {
                byte[] buffer=new byte[1024];
                DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length);
                socket.receive(datagramPacket);
                byte[] data=datagramPacket.getData();
                String string=new String(data,0,data.length);
                System.out.println(fromstring+&quot;: &quot;+string);
                if (string.equals(&quot;bye&quot;))
                {
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        socket.close();
    }
}
</code></pre>
<h1 id="同学和老师同时开启两条线程">同学和老师同时开启两条线程</h1>
<p>同学:</p>
<pre><code>package com.deng.Talk;

public class TalkStudent {
    public static void main(String[] args) {
        new Thread(new TalkSend(7777,&quot;localhost&quot;,9999)).start();
        new Thread(new Talkreceive(8888,&quot;老师&quot;)).start();
    }
}
</code></pre>
<p>老师：</p>
<pre><code>package com.deng.Talk;

public class TalkTeacher {
    public static void main(String[] args) {
        new Thread(new TalkSend(6666,&quot;localhost&quot;,8888)).start();
        new Thread(new Talkreceive(9999,&quot;学生&quot;)).start();
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之使用UDP实现聊天]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-shi-yong-udp-shi-xian-liao-tian/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-shi-yong-udp-shi-xian-liao-tian/">
        </link>
        <updated>2021-04-07T10:55:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="循环发送消息">循环发送消息</h1>
<pre><code>package com.deng.pojo03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.*;
import java.nio.charset.StandardCharsets;

public class UDPsender01 {
    public static void main(String[] args) throws Exception {
        DatagramSocket socket=new DatagramSocket(9999);
        BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
        while (true)
        {
            String string=reader.readLine();
            byte[] buffer=string.getBytes();
            DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length,new InetSocketAddress(&quot;localhost&quot;,8888));
            socket.send(datagramPacket);
            if (string.equals(&quot;bye&quot;))
            {
                break;
            }
        }

        socket.close();
    }
}
</code></pre>
<h1 id="循环接收消息">循环接收消息</h1>
<pre><code>package com.deng.pojo03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketException;

public class UDPsender02 {
    public static void main(String[] args) throws Exception {
        DatagramSocket socket=new DatagramSocket(8888);
          while (true)
          {
              byte[] buffer=new byte[1024];
              DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length);
              socket.receive(datagramPacket);
              byte[] data=datagramPacket.getData();
              String string=new String(data,0,data.length);
              System.out.println(string);
              if (string.equals(&quot;bye&quot;))
              {
               break;
              }
          }
          socket.close();
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之UDP发送消息]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-udp-fa-song-xiao-xi/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-udp-fa-song-xiao-xi/">
        </link>
        <updated>2021-04-07T10:27:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="发送信息不需要知道对方的地址">发送信息，不需要知道对方的地址</h1>
<h1 id="客户端">客户端</h1>
<pre><code>package com.deng.poji02;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
//不需要建立连接服务器
public class TestUDPclient01 {
    public static void main(String[] args) throws Exception {
        //建立一个Socket
        DatagramSocket socket=new DatagramSocket();
        //建立一个包
        String string=&quot;服务器，你好啊！&quot;;
        InetAddress inetAddress=InetAddress.getByName(&quot;localhost&quot;);
        int port=9999;
        //数据，数据的长度，IP地址，端口号
        DatagramPacket datagramPacket=new DatagramPacket(string.getBytes(),0,string.getBytes().length,inetAddress,port);
        //发送消息
        socket.send(datagramPacket);
        socket.close();
    }
}
</code></pre>
<h1 id="服务端">服务端</h1>
<pre><code>package com.deng.poji02;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
//等待客户端的连接
public class TestUDPservers {
    public static void main(String[] args) throws Exception {
        //建立一个Socket，开放端口
        DatagramSocket socket=new DatagramSocket(9999);
        //接收数据包
        byte[] buffer=new byte[1024];
        DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length);
        //阻塞接收
        socket.receive(datagramPacket);
        System.out.println(datagramPacket.getAddress().getHostName());
        System.out.println(new String(datagramPacket.getData(),0,datagramPacket.getLength()));
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之文件上传实现]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-wen-jian-shang-chuan-shi-xian/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-wen-jian-shang-chuan-shi-xian/">
        </link>
        <updated>2021-04-06T13:53:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="服务端">服务端</h1>
<pre><code>package com.deng.pojo;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class TCPserver02 {
    public static void main(String[] args) throws Exception {
        //创建一个服务
        ServerSocket serverSocket = new ServerSocket(9000);
        //监听接受客户端的连接
        Socket socket = serverSocket.accept();
        //获取输入流
        InputStream inputStream = socket.getInputStream();
        //文件输出
        FileOutputStream fileOutputStream = new FileOutputStream(new File(&quot;1.jpg&quot;));
        byte[] buffer = new byte[1024];
        int len;
        while ((len = inputStream.read(buffer)) != -1) {
            fileOutputStream.write(buffer, 0, len);
        }
        //通知客户端我接收完毕
        OutputStream outputStream1 = socket.getOutputStream();
        outputStream1.write(&quot;我接受完毕了，你可以断开了&quot;.getBytes());
        socket.close();
        serverSocket.close();
        inputStream.close();
        fileOutputStream.close();
    }
}
</code></pre>
<h1 id="客户端">客户端</h1>
<pre><code>package com.deng.pojo;

import java.io.*;
import java.lang.reflect.Field;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

public class TPCclient02 {
    public static void main(String[] args) throws Exception {
        //创建一个Socket连接器
        InetAddress inetAddress = InetAddress.getByName(&quot;127.0.0.1&quot;);
        Socket socket = new Socket(inetAddress, 9000);
        //创建一个输出流
        OutputStream outputStream = socket.getOutputStream();
        //读取文件
        FileInputStream fileInputStream = new FileInputStream(new File(&quot;屏幕截图 2021-04-05 220249.png&quot;));
        //写出文件
        byte[] buffer = new byte[1024];
        int len;
        while ((len = fileInputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, len);
        }
        //通知服务器我已经接收完了
        socket.shutdownOutput();
        //确定服务器接收完，我才断开
        InputStream inputStream1 = socket.getInputStream();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] buffer01 = new byte[1024];
        int len01;
        while ((len01 = inputStream1.read(buffer01)) != -1) {
            byteArrayOutputStream.write(buffer01, 0, len01);
        }
        System.out.println(byteArrayOutputStream.toString());
        byteArrayOutputStream.close();
        //关闭资源
        socket.close();
        outputStream.close();
        fileInputStream.close();
    }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之TCP实现聊天]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-tcp-shi-xian-liao-tian/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-tcp-shi-xian-liao-tian/">
        </link>
        <updated>2021-04-06T12:06:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="客户端">客户端</h1>
<p>1.连接服务器Socket<br>
2.发送消息<br>
代码实现</p>
<pre><code>package com.deng.pojo;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

public class TPCclient {
    public static void main(String[] args) {
        InetAddress inetAddress=null;
        Socket socket=null;
        OutputStream os=null;
        try {
             inetAddress = InetAddress.getByName(&quot;127.0.0.1&quot;);
               int port=9999;
             socket=new Socket(inetAddress,port);
             os=socket.getOutputStream();
            os.write(&quot;邓贝真他妈帅&quot;.getBytes());
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        finally {
            if (socket!=null)
            {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (os!=null)
            {
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

</code></pre>
<h1 id="服务器">服务器</h1>
<p>1.建立服务的端口ServerSocket<br>
2.等待用户的链接accept<br>
3.接收用的消息<br>
代码实现</p>
<pre><code>package com.deng.pojo;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;

public class TCPserver {
    public static void main(String[] args) {
        ServerSocket serverSocket = null;
        Socket socket = null;
        InputStream is = null;
        ByteArrayOutputStream byteArrayOutputStream = null;
        try {
            serverSocket = new ServerSocket(9999);
            socket = serverSocket.accept();
            is = socket.getInputStream();
            byteArrayOutputStream = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int len;
            while ((len = is.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, len);
            }
            System.out.println(byteArrayOutputStream.toString());
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (serverSocket != null) {
                try {
                    serverSocket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (socket != null) {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (is!=null)
            {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (byteArrayOutputStream!=null)
            {
                try {
                    byteArrayOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[多线程学习之通信协议]]></title>
        <id>https://2651560750.github.io/post/duo-xian-cheng-xue-xi-zhi-tong-xin-xie-yi/</id>
        <link href="https://2651560750.github.io/post/duo-xian-cheng-xue-xi-zhi-tong-xin-xie-yi/">
        </link>
        <updated>2021-04-06T11:47:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="通信协议的定义和分类">通信协议的定义和分类!</h1>
<p>协议:约定，就好比我们现在说的是普通话。<br>
网络通信协议:速率，传输码率，代码结构，传输控制.….问题:非常的复杂?<br>
大事化小:分层!<br>
TCP/IP协议簇:实际上是一组协议重要:<br>
· TCP:用户传输协议.<br>
UDP∶用户数据报协议<br>
出名的协议:<br>
TCP:<br>
· IP: 网络互连协议<br>
<img src="https://2651560750.github.io/post-images/1617710086286.png" alt="" loading="lazy"></p>
<h1 id="tcp-udp-对比tcp">TCP udp 对比TCP:</h1>
<p>打电话·连接，稳定·三次握手四次挥手<br>
最少需要三次，保证稳定连接!</p>
<pre><code>A:你瞅啥?
B:瞅你咋地?
A:干一场!
A:我要走了!
B:我真的要走了吗?
B:你真的真的要走了吗?
A:我的真的要走了!
</code></pre>
<p>·客户端、服务端<br>
·传输完成，释放连接，效率低<br>
UDP:发短信<br>
·不连接，不稳定<br>
·客户端、服务端:没有明确的界限<br>
·不管有没有准备好，都可以发给你..</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之port端口]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-port-duan-kou/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-port-duan-kou/">
        </link>
        <updated>2021-04-06T11:33:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="端口的概念">端口的概念</h1>
<p>端口表示计算机上的一个程序的进程;<br>
·不同的进程有不同的端口号!用来区分软件!·被规定0~65535<br>
。TCP,UDP: 65535 * 2 tcp: 80，udp: 80吗，单个协议下，端口号不能冲突·端口分类<br>
。公有端口0~1023<br>
.HTTP :80<br>
-HTTPS: 443<br>
FTP∶21-<br>
Telent : 23<br>
。程序注册端口:1024~49151,<br>
分配用户或者程序<br>
Tomcat : 8080<br>
-MySQL : 3306-<br>
Oracle : 1521。<br>
。动态、私有:49152~ 65535<br>
1 netstat -ano #查看所有的端口<br>
2 netstat -anolfindstr &quot;5900&quot;#查看指定的端口<br>
3 task1istlfindstr &quot;8696&quot;#查看指定端口的进程<br>
4ctr1+ shift+ ESC</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之IP类的应用]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-ip-lei-de-ying-yong/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-ip-lei-de-ying-yong/">
        </link>
        <updated>2021-04-06T02:38:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ip地址-inetaddress">ip地址: InetAddress</h1>
<p>·唯一定位一台网络上计算机.<br>
127.0.0.1:本机 localhos<br>
t· ip地址的分类<br>
o ipv4 / ipv6<br>
IPV4127.0.0.1 ，4个字节组成。，0<sub>255，42亿</sub> ;30亿都在北美，亚洲4亿。2011年就用尽; iPV6:128位。8个无符号整数!<br>
<code>2001: 0bb2: aaaa: 0015:0000: 0000: 1aaa: 1312!</code><br>
o公网-私网<br>
·ABCD类<br>
·192.168.xx.xx，专门给组织内部使用的</p>
<h1 id="代码实现">代码实现</h1>
<pre><code>package com.deng.pojo;

import java.net.InetAddress;
import java.net.UnknownHostException;

public class TestAddress {
    public static void main(String[] args) {
        try {
            //查询本机地址
            InetAddress inetAddress1= InetAddress.getByName(&quot;127.0.0.1&quot;);
            System.out.println(inetAddress1);
            InetAddress inetAddress3= InetAddress.getByName(&quot;localhost&quot;);
            System.out.println(inetAddress3);
            InetAddress inetAddress4= InetAddress.getLocalHost();
            System.out.println(inetAddress4);
            //查询网页地址
            InetAddress inetAddress2= InetAddress.getByName(&quot;www.baidu.com&quot;);
            System.out.println(inetAddress2);
            System.out.println(inetAddress1.getAddress());//地址
            System.out.println(inetAddress1.getCanonicalHostName());//规范的名字
            System.out.println(inetAddress1.getHostAddress());//ip
            System.out.println(inetAddress1.getHostName());//域名，本机自己的名字
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之两大要素]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-liang-da-yao-su/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-liang-da-yao-su/">
        </link>
        <updated>2021-04-06T02:37:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="网络通信要素">网络通信要素</h1>
<p>1.网络编程中有两个主要的问题<br>
。如何准确的定位到网络上的一台或者多台主机。找到主机之后如何进行通信<br>
2.网络编程中的要素<br>
。IP和端口号IP.<br>
。网络通信协议udp, tcp<br>
3.万物皆对象</p>
]]></content>
    </entry>
</feed>