<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2651560750.github.io</id>
    <title>Gridea</title>
    <updated>2021-03-28T11:33:35.271Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2651560750.github.io"/>
    <link rel="self" href="https://2651560750.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://2651560750.github.io/images/avatar.png</logo>
    <icon>https://2651560750.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[JS学习之函数（重点）]]></title>
        <id>https://2651560750.github.io/post/js-xue-xi-zhi-han-shu-chong-dian/</id>
        <link href="https://2651560750.github.io/post/js-xue-xi-zhi-han-shu-chong-dian/">
        </link>
        <updated>2021-03-27T12:22:56.000Z</updated>
        <content type="html"><![CDATA[<p>#函数的二种定义方式<br>
第一种，可以使用function关键字来定义函数。<br>
使用的格式如下:<br>
function函数名(形参列表)<br>
函数体<br>
}<br>
在JavaScript语言中，如何定义带有返回值的函数?<br>
只需要在函数体内直接使用return语句返回值即可!</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
/*        第一种，可以使用function关键字来定义函数。
使用的格式如下:
    function函数名(形参列表)
        函数体
        }*/
//定义一个无惨函数
function fun(){
    alert(&quot;岁东航也是个王八犊子操&quot;);
}
//调用函数
fun();
//定义一个有参函数
function fun2( a,b){
    alert(&quot;岁东航他妈的拉了&quot;+a+&quot;坨屎,他直接说&quot;+b);
}
fun2(12,&quot;曹尼玛&quot;);
//带有返回值类型的函数
function fun3(sum1,sum2){
    var sum =sum1+sum2
    return sum;
}
alert(fun3(25,65));
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>函数的第二种定义方式,格式如下:<br>
使用格式如下:<br>
var 函数名= functon(形参列表){函数体}</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
       var fun=function (){
            alert(&quot;岁东航也是个王八犊子操&quot;);
        }
        //调用函数
        fun();
        //定义一个有参函数
       var fun2= function ( a,b){
            alert(&quot;岁东航他妈的拉了&quot;+a+&quot;坨屎,他直接说&quot;+b);
        }
        fun2(12,&quot;曹尼玛&quot;);
        //带有返回值类型的函数
       var fun3=function (sum1,sum2){
            var sum =sum1+sum2
            return sum;
        }
        alert(fun3(25,65));
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS学习之数组（重点）]]></title>
        <id>https://2651560750.github.io/post/js-xue-xi-zhi-shu-zu-chong-dian/</id>
        <link href="https://2651560750.github.io/post/js-xue-xi-zhi-shu-zu-chong-dian/">
        </link>
        <updated>2021-03-27T12:05:12.000Z</updated>
        <content type="html"><![CDATA[<p>#数组的定义方式</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var arr = [true, 1];//定义一个空数组
        //  aLert( arr.Length ); // 0
        arr[0] = 12;
        alert( arr[0] );//12
        // alert( arr.Length ); // 0
        // javaScript语言中的数组，只要我们通过数组下标赋值，那么最大的下标值，就会自动的给数组做扩容操作。
        arr[2] =&quot;abc&quot;;
        alert(arr.length); //3
        alert(arr[9]);
        alert(arr.length);//3
        // alert(arr[1]); // undefined
        // 数组的遍历
        for (var i = o; i &lt; arr.length; i++) {
            alert(arr[i]);
        }

    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS之逻辑运算符]]></title>
        <id>https://2651560750.github.io/post/js-zhi-luo-ji-yun-suan-fu/</id>
        <link href="https://2651560750.github.io/post/js-zhi-luo-ji-yun-suan-fu/">
        </link>
        <updated>2021-03-27T11:46:19.000Z</updated>
        <content type="html"><![CDATA[<p>在avaScript语言中，所有的变量，都可以做为一个boolean类型的变量去使用0 , null.undefined、&quot;&quot;(空串)都认为是false ;<br>
/*<br>
&amp;&amp;与运算。有两种情况:<br>
第一种:当表达式全为真的时候。返回最后一个表达式的值。<br>
第二种:当表达式中，有一个为假的时候。返回第一个为假的表达式的值<br>
| |或运算<br>
第一种情况:当表达式全为假时，返回最后一个表达式的值<br>
第二种情况:只要有一个表达式为真。就会把回第一个为真的表达式的值<br>
并且&amp;&amp;与运算和||或运算有短路。<br>
短路就是说，当这个&amp;&amp;或|运算有结果了之后。后面的表达式不再执行<br>
*/</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        /*
        var a = &quot;abc&quot;;
        var b = true;
        var c = false;
        var d = null;
        alert(a &amp;&amp; b);//true
        alert(b &amp;&amp; a);//abc
        alert(a &amp;&amp; d);//null
        alert(a &amp;&amp; c);//false
        alert(a&amp;&amp;b&amp;&amp;c&amp;&amp;d)//false
        alert(a || b);//abc
        alert(a || c);//abc
        alert(a || d);//abc
        alert(c || d);//null
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS学习之关系运算]]></title>
        <id>https://2651560750.github.io/post/js-xue-xi-zhi-guan-xi-yun-suan/</id>
        <link href="https://2651560750.github.io/post/js-xue-xi-zhi-guan-xi-yun-suan/">
        </link>
        <updated>2021-03-27T11:41:56.000Z</updated>
        <content type="html"><![CDATA[<p>等于:<br>
等于是简单的做字面值的比较   ==<br>
全等于:<br>
除了做字面值的比较之外,还会比较两个变量的数据类型     ===</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var a=&quot;12&quot;;
        var b=12;
        alert(a==b)//true
        alert(a===b)//false
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS学习之变量]]></title>
        <id>https://2651560750.github.io/post/js-xue-xi-zhi-bian-liang/</id>
        <link href="https://2651560750.github.io/post/js-xue-xi-zhi-bian-liang/">
        </link>
        <updated>2021-03-27T11:29:03.000Z</updated>
        <content type="html"><![CDATA[<p>什么是变量?变量是可以存放某些值的内存的命名。<br>
#Javascript的变量类型:<br>
数值类型:      number<br>
字符串类型:       string<br>
对象类型:    object<br>
布尔类型:     boolean<br>
函数类型:     function<br>
#JavaScript里特殊的值:<br>
undefined       未定义，所有js 变量未赋于初始值的时候，默认值都是undefined.<br>
null        空值<br>
NAN          全称是:Not a Number。非数字。非数值。<br>
#Js中的定义变量格式:<br>
var变量名;<br>
var变量名=值;</p>
<pre><code> &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        var i;
        //alert(i);//undefined
        i = 12;
         // typeof()是JavaScript语言提供的一个函数。
        //它可以取变量的数据类型返回
        // alert( typeof(i) ); // number
        i = &quot;abc&quot;;
        alert( typeof(i) ); // String
        var a=25;
        var b=&quot;abc&quot;;
        alert(a * b);//NaN是非数值，非数字
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DQL查询语句（最重点）]]></title>
        <id>https://2651560750.github.io/post/dql-cha-xun-yu-ju-zui-chong-dian/</id>
        <link href="https://2651560750.github.io/post/dql-cha-xun-yu-ju-zui-chong-dian/">
        </link>
        <updated>2021-03-27T05:50:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dql">DQL</h1>
<p>(Data Query LANGUAGE:数据查询语言)<br>
·所有的查询操作都用它Select<br>
·简单的查询，复杂的查询它都能做~<br>
·数据库中最核心的语言,最重要的语句<br>
·使用频率最高的语句<br>
#指定查询字段<br>
--查询全部的学生SELECT字段 FROM表S<br>
<code>ELECT * FROM student</code><br>
--查询指定字段<br>
<code>SELECT`StudentNo`, `studentName` FROM student</code><br>
--别名，给结果起一个名字AS可以给字段起别名，也可以给表起别名<br>
<code>SELECT‘studentNo`AS学号,`studentName`AS学生姓名FROM student AS s</code><br>
--函数Concat (a， b)<br>
<code>SELECT CONCAT ( '姓名: ', studentName) As 新名字 FROM student</code><br>
#去重：<br>
作用:去除SELECT查询出来的结果中重复的数据，重复的数据只显示一条<br>
1  --查询一下有哪些同学参加了考试，成绩<br>
2  <code>SELECT*FROM result</code>--查询全部的考试成绩<br>
3  <code>SELECT studentNo ' FROM result</code> --查询有哪些同学参加了考试<br>
4  <code>SELECT DISTINCT 'studentNo` FROM result</code> --发现重复数据，去重<br>
#数据库的列(表达式):<br>
1  <code>SELECT VERSION</code>--查询系统版本（函数)<br>
2  <code>SELECT100*3-1 AS计算结果</code>--用来计算（表达式)<br>
3 <code>SELECT @@auto_increment_increment</code> --查询自增的步长(变量)<br>
4 <code>SELECT 'studentNo', 'studentResult +1 AS'提分后'FROM result</code>--学员考试成绩＋1分查看<br>
总结：数据库中的表达式:文本值，列，Null，函数，计算表达式，系统变量.....</p>
<h1 id="where条件句子">where条件句子</h1>
<p>作用：检索数据中符合条件的值<br>
1.连接符 “||”<br>
SQL中的连接符”||” 可将结果连接起来为一列<br>
将u_name 和“的成绩为” u_score 连接起来<br>
<code>select u_name || '的成绩为' || u_score as 成绩from T_USER ;</code><br>
2. SQL中可以用SELECT-WHERE进行条件查询<br>
比较运算 ‘&lt;’ ‘&lt;=’ ‘&gt;’ ‘&gt;=’ ‘!=’<br>
SQL中可以使用 条件运算符 ‘&lt;’ ‘&lt;=’ ‘&gt;’ ‘&gt;=’ ‘!=’ 过滤查询结果中的某些行，多个条件之间可以用 ‘and’ 连接。<br>
查询T_USER表中成绩大于等于60分的学生</p>
<pre><code>select u_name , u_score
from T_USER 
where u_score &gt;= 60 ;
</code></pre>
<ol start="3">
<li>与条件 (AND，BETWEEN)<br>
查询A-B区间<br>
查询T_USER表中成绩大于等于60分且小于等于80分的学生<br>
AND写法</li>
</ol>
<pre><code>select u_name , u_score
from T_USER 
where u_score &gt;60 and u_score &lt;80
</code></pre>
<p>BETWEEN写法</p>
<pre><code>select u_name , u_score
from T_USER 
where u_score between 60 and 80 ;
</code></pre>
<ol start="4">
<li>或条件（OR，IN）<br>
SQL中用于或运算的关键字OR和IN<br>
查询分数大于90分或者小于60分的记录-OR</li>
</ol>
<pre><code>select u_name , u_score
from T_USER 
where u_score &gt;90 or u_score &lt;60 ;
</code></pre>
<p>查询成绩为100，98，65的学生-IN</p>
<pre><code>select u_name , u_score
from T_USER 
where u_score in(100,98,65) ;
</code></pre>
<ol>
<li>非条件（！=，NOT）<br>
查询名字不叫 ‘叶清逸’ 的记录<br>
！=写法</li>
</ol>
<pre><code>select *
from T_USER 
where u_name != '叶清逸' ;
</code></pre>
<p>NOT写法</p>
<pre><code>select *
from T_USER 
where u_name not like '叶清逸' ;
</code></pre>
<ol start="6">
<li>模糊查询LIKE<br>
SQL中可以使用模糊查询like，其中 ‘_’ 占一位 ‘%’占多位。</li>
</ol>
<p>查询名字中有 ‘清’ 字的记录<br>
可以有三种表示方式,结果等价<br>
包含’清’: %清%<br>
第二位为’清’：<em>清%<br>
倒数第二位为’清’：%清</em></p>
<pre><code>select *
from T_USER 
where u_name like '%清%' ;
</code></pre>
<ol start="7">
<li>查询排序ORDER BY<br>
SQL中可以对查询结果进行排序，DESC表示按从大到小排序，ASC表示按从小到大排序，默认为从小到大排序。 将T_USER表按成绩从大到小排序</li>
</ol>
<pre><code>select *
from T_USER 
order by u_score desc ;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MYSQL数据管理]]></title>
        <id>https://2651560750.github.io/post/mysql-shu-ju-guan-li/</id>
        <link href="https://2651560750.github.io/post/mysql-shu-ju-guan-li/">
        </link>
        <updated>2021-03-27T04:38:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="外键并不建议使用原因删除表示关系会错综复杂">外键（并不建议使用）原因：删除表示关系会错综复杂</h1>
<p>最佳实践</p>
<ul>
<li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段)</li>
<li>我们想使用多张表的数据，想使用外键(程序去实现)</li>
</ul>
<h1 id="dml语言全部记住">DML语言（全部记住）</h1>
<p>数据库意义 :数据存储，数据管理<br>
DML语言: 数据操作语言<br>
·lnsert<br>
· update<br>
·delete</p>
<h1 id="添加">添加：</h1>
<p>插入语句（添加)<br>
-insert into表名([字段名1,字段2,字段3])values('值1'),('值2'),('值3'，... .)<br>
<code>INSERT INTO 'grade' ( gradenameVALUES('大四')</code><br>
--由于主键自增我们可以省略(如果不写表的字段，他就会—一匹配)<br>
<code>INSERT INTOgradeVALUES('大三')</code><br>
--一般写插入语句，我们一定要数据和字段一一对应!<br>
--插入多个字段</p>
<pre><code class="language-INSERT">INSERT INTO 'student(name ) VALUES('张三')
INSERT INTO 'student (name', pwd , sex )VALUES('张三' , ' aaaaaa ','男')
工NSERTINTO 'student name,'pwd ,'sex ')
VALUES ('李四'， 'aaaaaa'，'男'),('王五', 'aaaaaa','男')````
语法: insert into表名([字段名1,字段2,字段3])values('值1'),('值2'),C&quot;值3'，....)
注意事项:
1.字段和字段之间使用英文逗号隔开
2.字段是可以省略的，但是后面的值必须要要——对应，不能少
3.可以同时插入多条数据，VALUES后面的值，需要使用，隔开即可
# 修改
语法:UPDATE表名 set co1numuname = value, [co1num_name = value,....] where [条件]注意:
. colnum_name是数据库的列，尽量带上
·条件，筛选的条件，如果没有指定，则会修改所有的列. value，是一个具体的值，也可以是一个变量
```` UPDATE ‘student’ SET birthday'= CURRENT_TIME WHERE ‘name'='长江7号’AND sex='女'````
# 删除
语法:delete from表名[where条件]
 --删除数据(避免这样写，会全部删除)
  DELETE FROM  student
--删除指定数据
DELETE FROM student wHERE id = 1;
delete的 TRUNCATE 区别
·相同点:都能删除数据，都不会删除表结构·不同:
 TRUNCATE重新设置自增列计数器会归零TRUNCATE 不会影响事务
DELETE FROM 'test --不会影响自增
TRUNCATE TABLE `test' --自增会归零



 

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写法]]></title>
        <id>https://2651560750.github.io/post/xie-fa/</id>
        <link href="https://2651560750.github.io/post/xie-fa/">
        </link>
        <updated>2021-03-27T04:35:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="学习javacsript">学习javacsript</h1>
<ul>
<li>学习java</li>
<li>学习数据库<br>
1 dawd</li>
</ul>
<ol>
<li>学习java</li>
<li>学习数据库</li>
</ol>
<blockquote>
<p>这是引用</p>
<blockquote>
<p>这是引用</p>
</blockquote>
</blockquote>
<pre><code class="language-javascript">  在此输入代码
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[修改删除表]]></title>
        <id>https://2651560750.github.io/post/xiu-gai-shan-chu-biao/</id>
        <link href="https://2651560750.github.io/post/xiu-gai-shan-chu-biao/">
        </link>
        <updated>2021-03-27T04:25:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="修改">修改：</h1>
<p>--修改表名 ALTER TABLE 旧表名 RENAME AS新表名<br>
<code>ALTER TABLE teacher RENAME AS teacher1</code><br>
--增加表的字段 ALTER TABLE表名 ADD字段名列属性<br>
<code>ALTER TABLE teacher1 ADD age INT (11)</code><br>
--修改表的字段(重命名，修改约束!)<br>
<code>ALTER TABLE teacher1 MODIFY age VARCHAR(11)</code>   --修改约束<br>
<code>ALTER TABLE teacher1 CHANGE age age1 INT(1)</code>    --字段重名名<br>
--册除表的字段<br>
<code>ALTERTABLE teacher1 DROP agel</code></p>
<h1 id="册除表">册除表:</h1>
<p>(如果表存在再删除)<br>
<code>DROP TABLE IE EXISTS teacheri</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据表的类型]]></title>
        <id>https://2651560750.github.io/post/shu-ju-biao-de-lei-xing/</id>
        <link href="https://2651560750.github.io/post/shu-ju-biao-de-lei-xing/">
        </link>
        <updated>2021-03-27T04:17:03.000Z</updated>
        <content type="html"><![CDATA[<p>-- 关于数据库的引擎<br>
/*<br>
INNODB 默认使用<br>
MYISAM 早些年使用的<br>
*/<br>
MYISAM                           INNODB<br>
事务支持            不支持                                 支持<br>
数据行锁定         不支持                                支持<br>
外键约束             不支持                                  支持<br>
全文索引              支持                                     不支持<br>
表空间的大小        较小                              较大，约为两倍</p>
]]></content>
    </entry>
</feed>