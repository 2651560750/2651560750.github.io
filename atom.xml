<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2651560750.github.io</id>
    <title>Gridea</title>
    <updated>2021-04-15T12:01:17.826Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2651560750.github.io"/>
    <link rel="self" href="https://2651560750.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://2651560750.github.io/images/avatar.png</logo>
    <icon>https://2651560750.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[JavaWeb学习之Tomcat服务器详解]]></title>
        <id>https://2651560750.github.io/post/javaweb-xue-xi-zhi-tomcat-fu-wu-qi-xiang-jie/</id>
        <link href="https://2651560750.github.io/post/javaweb-xue-xi-zhi-tomcat-fu-wu-qi-xiang-jie/">
        </link>
        <updated>2021-04-14T13:05:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装tomcat">安装Tomcat</h1>
<p>官网：https://tomcat.apache.org/download-10.cgi<br>
下载压缩包：<br>
<img src="https://2651560750.github.io/post-images/1618405988993.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618406062734.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618406301231.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618406550738.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618406874087.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618406923223.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618407053429.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618407059092.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618407595729.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaWeb学习之web服务器]]></title>
        <id>https://2651560750.github.io/post/javaweb-xue-xi-zhi-web-fu-wu-qi/</id>
        <link href="https://2651560750.github.io/post/javaweb-xue-xi-zhi-web-fu-wu-qi/">
        </link>
        <updated>2021-04-14T12:37:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="技术讲解">技术讲解</h1>
<p>ASP:<br>
·微软:国内最早流行的就是ASP;<br>
·在HTML中嵌入了VB的脚本，ASP + COM;<br>
·在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱<br>
·维护成本高!<br>
php:<br>
PHP开发速度很快，功能很强大，跨平台，代码很简单(70%,WP)<br>
·无法承载大访问量的情况(局限性)<br>
JSP/Servlet:<br>
B/S:浏览和服务器<br>
C/S:客户端和服务器<br>
. sun公司主推的B/S架构<br>
·基于Java语言的(所有的大公司，或者一些开源的组件，都是用ava写的)<br>
。可以承载三高问题带来的影响;</p>
<h1 id="服务器">服务器</h1>
<p>Tomcat<br>
面向百度编程;<br>
Tomcat是Apache软件基金会（(Apache Software Foundation)的Jakarta项目中的一个核心项目，最新的<br>
Servlet和SP规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。<br>
Tomcat 服务器是一个免费的开放源代码的Web应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试$P程序的首选。对于一个ava初学web的人来说，它是最佳的选择<br>
Tomcat 实际上运行S页面和Servlet。 Tomcat最新版本为9.0。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaWeb学习之JavaWeb的概念]]></title>
        <id>https://2651560750.github.io/post/javaweb-xue-xi-zhi-javaweb-de-gai-nian/</id>
        <link href="https://2651560750.github.io/post/javaweb-xue-xi-zhi-javaweb-de-gai-nian/">
        </link>
        <updated>2021-04-14T12:14:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="a什么是javaweb">a)什么是JavaWeb</h1>
<p>JavaWeb是指，所有通过Java语言编写可以通过浏览器访问的程序的总称，叫JavaWeb。javaweb是基于请求和响应来开发的。</p>
<h1 id="b什么是请求">b)什么是请求</h1>
<p>请求是指客户端给服务器发送数据，叫请求Request。</p>
<h1 id="c什么是响应">c)什么是响应</h1>
<p>响应是指服务器给客户端回传数据，叫响应Response。</p>
<h1 id="d请求和响应的关系">d)请求和响应的关系</h1>
<p>请求和响应是成对出现的，有请求就一定有响应。<br>
<img src="https://2651560750.github.io/post-images/1618402769615.png" alt="" loading="lazy"><br>
<img src="https://2651560750.github.io/post-images/1618404995702.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之URL下载网络资源]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-url-xia-zai-wang-luo-zi-yuan/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-url-xia-zai-wang-luo-zi-yuan/">
        </link>
        <updated>2021-04-07T12:05:05.000Z</updated>
        <content type="html"><![CDATA[<pre><code>package com.deng.URL01;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class Urldown {
    public static void main(String[] args) throws Exception {
        URL url=new URL(&quot;https://th.bing.com/th/id/Rde1bdc82f8063c8df1b62a686c12042d?rik=PNiygsObQkS7hw&amp;riu=http%3a%2f%2fimage.photocnc.com%2fphotocnc%2f2020-06%2f29%2f202006290131193f0894ee4d24494d61d50a61a3c0ef49.jpg.w1680.jpg&amp;ehk=vlDDobgu9MW4%2f9CP8wP%2bTxuJ5%2fJ6S7HY%2faTAUy1%2beaQ%3d&amp;risl=&amp;pid=ImgRaw&quot;);
        HttpURLConnection urlConnection=(HttpURLConnection) url.openConnection();
        InputStream inputStream=urlConnection.getInputStream();
        FileOutputStream fos=new FileOutputStream(&quot;yilishabais.jpg&quot;);
        byte[] buffer=new byte[1024];
        int len;
        while ((len=inputStream.read(buffer))!=-1)
        {
            fos.write(buffer,0,len);
        }
        fos.close();
        inputStream.close();
        urlConnection.disconnect();
    }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://2651560750.github.io/post-images/1617799257161.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之多线程在线质询]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-duo-xian-cheng-zai-xian-zhi-xun/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-duo-xian-cheng-zai-xian-zhi-xun/">
        </link>
        <updated>2021-04-07T11:21:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="发信息">发信息</h1>
<pre><code>package com.deng.Talk;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketException;

public class TalkSend implements Runnable{
    DatagramSocket socket=null;
    BufferedReader reader=null;
    private int fromport;
    private String toip;
    private int toport;

    public TalkSend(int fromport, String toip, int toport) {
        this.fromport = fromport;
        this.toip = toip;
        this.toport = toport;
        try {
            socket=new DatagramSocket(fromport);
            reader=new BufferedReader(new InputStreamReader(System.in));
        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        while (true)
        {
            try {
                String string=reader.readLine();
                byte[] buffer=string.getBytes();
                DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length,new InetSocketAddress(this.toip,this.toport));
                socket.send(datagramPacket);
                if (string.equals(&quot;bye&quot;))
                {
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        socket.close();
    }
}
</code></pre>
<h1 id="收信息">收信息</h1>
<pre><code>package com.deng.Talk;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

public class Talkreceive implements Runnable{
    DatagramSocket socket=null;
    private int port;
private String fromstring;
    public Talkreceive(int port,String fromstring) {
        this.port = port;
        this.fromstring=fromstring;
        try {
            socket=new DatagramSocket(port);
        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        while (true)
        {
            try {
                byte[] buffer=new byte[1024];
                DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length);
                socket.receive(datagramPacket);
                byte[] data=datagramPacket.getData();
                String string=new String(data,0,data.length);
                System.out.println(fromstring+&quot;: &quot;+string);
                if (string.equals(&quot;bye&quot;))
                {
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        socket.close();
    }
}
</code></pre>
<h1 id="同学和老师同时开启两条线程">同学和老师同时开启两条线程</h1>
<p>同学:</p>
<pre><code>package com.deng.Talk;

public class TalkStudent {
    public static void main(String[] args) {
        new Thread(new TalkSend(7777,&quot;localhost&quot;,9999)).start();
        new Thread(new Talkreceive(8888,&quot;老师&quot;)).start();
    }
}
</code></pre>
<p>老师：</p>
<pre><code>package com.deng.Talk;

public class TalkTeacher {
    public static void main(String[] args) {
        new Thread(new TalkSend(6666,&quot;localhost&quot;,8888)).start();
        new Thread(new Talkreceive(9999,&quot;学生&quot;)).start();
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之使用UDP实现聊天]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-shi-yong-udp-shi-xian-liao-tian/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-shi-yong-udp-shi-xian-liao-tian/">
        </link>
        <updated>2021-04-07T10:55:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="循环发送消息">循环发送消息</h1>
<pre><code>package com.deng.pojo03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.*;
import java.nio.charset.StandardCharsets;

public class UDPsender01 {
    public static void main(String[] args) throws Exception {
        DatagramSocket socket=new DatagramSocket(9999);
        BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));
        while (true)
        {
            String string=reader.readLine();
            byte[] buffer=string.getBytes();
            DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length,new InetSocketAddress(&quot;localhost&quot;,8888));
            socket.send(datagramPacket);
            if (string.equals(&quot;bye&quot;))
            {
                break;
            }
        }

        socket.close();
    }
}
</code></pre>
<h1 id="循环接收消息">循环接收消息</h1>
<pre><code>package com.deng.pojo03;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketException;

public class UDPsender02 {
    public static void main(String[] args) throws Exception {
        DatagramSocket socket=new DatagramSocket(8888);
          while (true)
          {
              byte[] buffer=new byte[1024];
              DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length);
              socket.receive(datagramPacket);
              byte[] data=datagramPacket.getData();
              String string=new String(data,0,data.length);
              System.out.println(string);
              if (string.equals(&quot;bye&quot;))
              {
               break;
              }
          }
          socket.close();
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之UDP发送消息]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-udp-fa-song-xiao-xi/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-udp-fa-song-xiao-xi/">
        </link>
        <updated>2021-04-07T10:27:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="发送信息不需要知道对方的地址">发送信息，不需要知道对方的地址</h1>
<h1 id="客户端">客户端</h1>
<pre><code>package com.deng.poji02;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
//不需要建立连接服务器
public class TestUDPclient01 {
    public static void main(String[] args) throws Exception {
        //建立一个Socket
        DatagramSocket socket=new DatagramSocket();
        //建立一个包
        String string=&quot;服务器，你好啊！&quot;;
        InetAddress inetAddress=InetAddress.getByName(&quot;localhost&quot;);
        int port=9999;
        //数据，数据的长度，IP地址，端口号
        DatagramPacket datagramPacket=new DatagramPacket(string.getBytes(),0,string.getBytes().length,inetAddress,port);
        //发送消息
        socket.send(datagramPacket);
        socket.close();
    }
}
</code></pre>
<h1 id="服务端">服务端</h1>
<pre><code>package com.deng.poji02;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
//等待客户端的连接
public class TestUDPservers {
    public static void main(String[] args) throws Exception {
        //建立一个Socket，开放端口
        DatagramSocket socket=new DatagramSocket(9999);
        //接收数据包
        byte[] buffer=new byte[1024];
        DatagramPacket datagramPacket=new DatagramPacket(buffer,0,buffer.length);
        //阻塞接收
        socket.receive(datagramPacket);
        System.out.println(datagramPacket.getAddress().getHostName());
        System.out.println(new String(datagramPacket.getData(),0,datagramPacket.getLength()));
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之文件上传实现]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-wen-jian-shang-chuan-shi-xian/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-wen-jian-shang-chuan-shi-xian/">
        </link>
        <updated>2021-04-06T13:53:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="服务端">服务端</h1>
<pre><code>package com.deng.pojo;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class TCPserver02 {
    public static void main(String[] args) throws Exception {
        //创建一个服务
        ServerSocket serverSocket = new ServerSocket(9000);
        //监听接受客户端的连接
        Socket socket = serverSocket.accept();
        //获取输入流
        InputStream inputStream = socket.getInputStream();
        //文件输出
        FileOutputStream fileOutputStream = new FileOutputStream(new File(&quot;1.jpg&quot;));
        byte[] buffer = new byte[1024];
        int len;
        while ((len = inputStream.read(buffer)) != -1) {
            fileOutputStream.write(buffer, 0, len);
        }
        //通知客户端我接收完毕
        OutputStream outputStream1 = socket.getOutputStream();
        outputStream1.write(&quot;我接受完毕了，你可以断开了&quot;.getBytes());
        socket.close();
        serverSocket.close();
        inputStream.close();
        fileOutputStream.close();
    }
}
</code></pre>
<h1 id="客户端">客户端</h1>
<pre><code>package com.deng.pojo;

import java.io.*;
import java.lang.reflect.Field;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

public class TPCclient02 {
    public static void main(String[] args) throws Exception {
        //创建一个Socket连接器
        InetAddress inetAddress = InetAddress.getByName(&quot;127.0.0.1&quot;);
        Socket socket = new Socket(inetAddress, 9000);
        //创建一个输出流
        OutputStream outputStream = socket.getOutputStream();
        //读取文件
        FileInputStream fileInputStream = new FileInputStream(new File(&quot;屏幕截图 2021-04-05 220249.png&quot;));
        //写出文件
        byte[] buffer = new byte[1024];
        int len;
        while ((len = fileInputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, len);
        }
        //通知服务器我已经接收完了
        socket.shutdownOutput();
        //确定服务器接收完，我才断开
        InputStream inputStream1 = socket.getInputStream();
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] buffer01 = new byte[1024];
        int len01;
        while ((len01 = inputStream1.read(buffer01)) != -1) {
            byteArrayOutputStream.write(buffer01, 0, len01);
        }
        System.out.println(byteArrayOutputStream.toString());
        byteArrayOutputStream.close();
        //关闭资源
        socket.close();
        outputStream.close();
        fileInputStream.close();
    }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络编程学习之TCP实现聊天]]></title>
        <id>https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-tcp-shi-xian-liao-tian/</id>
        <link href="https://2651560750.github.io/post/wang-luo-bian-cheng-xue-xi-zhi-tcp-shi-xian-liao-tian/">
        </link>
        <updated>2021-04-06T12:06:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="客户端">客户端</h1>
<p>1.连接服务器Socket<br>
2.发送消息<br>
代码实现</p>
<pre><code>package com.deng.pojo;

import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

public class TPCclient {
    public static void main(String[] args) {
        InetAddress inetAddress=null;
        Socket socket=null;
        OutputStream os=null;
        try {
             inetAddress = InetAddress.getByName(&quot;127.0.0.1&quot;);
               int port=9999;
             socket=new Socket(inetAddress,port);
             os=socket.getOutputStream();
            os.write(&quot;邓贝真他妈帅&quot;.getBytes());
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        finally {
            if (socket!=null)
            {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (os!=null)
            {
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

</code></pre>
<h1 id="服务器">服务器</h1>
<p>1.建立服务的端口ServerSocket<br>
2.等待用户的链接accept<br>
3.接收用的消息<br>
代码实现</p>
<pre><code>package com.deng.pojo;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;

public class TCPserver {
    public static void main(String[] args) {
        ServerSocket serverSocket = null;
        Socket socket = null;
        InputStream is = null;
        ByteArrayOutputStream byteArrayOutputStream = null;
        try {
            serverSocket = new ServerSocket(9999);
            socket = serverSocket.accept();
            is = socket.getInputStream();
            byteArrayOutputStream = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int len;
            while ((len = is.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, len);
            }
            System.out.println(byteArrayOutputStream.toString());
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (serverSocket != null) {
                try {
                    serverSocket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (socket != null) {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (is!=null)
            {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (byteArrayOutputStream!=null)
            {
                try {
                    byteArrayOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[多线程学习之通信协议]]></title>
        <id>https://2651560750.github.io/post/duo-xian-cheng-xue-xi-zhi-tong-xin-xie-yi/</id>
        <link href="https://2651560750.github.io/post/duo-xian-cheng-xue-xi-zhi-tong-xin-xie-yi/">
        </link>
        <updated>2021-04-06T11:47:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="通信协议的定义和分类">通信协议的定义和分类!</h1>
<p>协议:约定，就好比我们现在说的是普通话。<br>
网络通信协议:速率，传输码率，代码结构，传输控制.….问题:非常的复杂?<br>
大事化小:分层!<br>
TCP/IP协议簇:实际上是一组协议重要:<br>
· TCP:用户传输协议.<br>
UDP∶用户数据报协议<br>
出名的协议:<br>
TCP:<br>
· IP: 网络互连协议<br>
<img src="https://2651560750.github.io/post-images/1617710086286.png" alt="" loading="lazy"></p>
<h1 id="tcp-udp-对比tcp">TCP udp 对比TCP:</h1>
<p>打电话·连接，稳定·三次握手四次挥手<br>
最少需要三次，保证稳定连接!</p>
<pre><code>A:你瞅啥?
B:瞅你咋地?
A:干一场!
A:我要走了!
B:我真的要走了吗?
B:你真的真的要走了吗?
A:我的真的要走了!
</code></pre>
<p>·客户端、服务端<br>
·传输完成，释放连接，效率低<br>
UDP:发短信<br>
·不连接，不稳定<br>
·客户端、服务端:没有明确的界限<br>
·不管有没有准备好，都可以发给你..</p>
]]></content>
    </entry>
</feed>