<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2651560750.github.io</id>
    <title>Gridea</title>
    <updated>2021-03-21T03:11:55.932Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2651560750.github.io"/>
    <link rel="self" href="https://2651560750.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://2651560750.github.io/images/avatar.png</logo>
    <icon>https://2651560750.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[DI依赖注入环境]]></title>
        <id>https://2651560750.github.io/post/di-yi-lai-zhu-ru-huan-jing/</id>
        <link href="https://2651560750.github.io/post/di-yi-lai-zhu-ru-huan-jing/">
        </link>
        <updated>2021-03-20T11:51:11.000Z</updated>
        <content type="html"><![CDATA[<p>1.构造器注入</p>
<p>2.set方式注入【重点】<br>
依赖：bean对象的创建依赖于容器！<br>
注入：bean对象中的所有属性，由容器来注入！<br>
环境搭建：<br>
1.复杂类型<br>
package com.deng.pojo;</p>
<p>public class Address {<br>
private String address;</p>
<pre><code>public String getAddress() {
    return address;
}

public void setAddress(String address) {
    this.address = address;
}
</code></pre>
<p>}</p>
<p>2.真实测试对象<br>
package com.deng.pojo;</p>
<p>import java.util.*;</p>
<p>public class Student {<br>
private String name;<br>
private Address address;<br>
private String[] books;<br>
private List<String> hobby;<br>
private Map&lt;String,String&gt; card;<br>
private Set<String> games;<br>
private Properties info;<br>
private  String wife;</p>
<pre><code>public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

public Address getAddress() {
    return address;
}

public void setAddress(Address address) {
    this.address = address;
}

public String[] getBooks() {
    return books;
}

public void setBooks(String[] books) {
    this.books = books;
}

public List&lt;String&gt; getHobby() {
    return hobby;
}

public void setHobby(List&lt;String&gt; hobby) {
    this.hobby = hobby;
}

public Map&lt;String, String&gt; getCard() {
    return card;
}

public void setCard(Map&lt;String, String&gt; card) {
    this.card = card;
}

public Set&lt;String&gt; getGames() {
    return games;
}

public void setGames(Set&lt;String&gt; games) {
    this.games = games;
}

public Properties getInfo() {
    return info;
}

public void setInfo(Properties info) {
    this.info = info;
}

public String getWife() {
    return wife;
}

public void setWife(String wife) {
    this.wife = wife;
}

@Override
public String toString() {
    return &quot;Student{&quot; +
            &quot;name='&quot; + name + '\'' +
            &quot;, address=&quot; + address +
            &quot;, books=&quot; + Arrays.toString(books) +
            &quot;, hobby=&quot; + hobby +
            &quot;, card=&quot; + card +
            &quot;, games=&quot; + games +
            &quot;, info=&quot; + info +
            &quot;, wife='&quot; + wife + '\'' +
            '}';
}
</code></pre>
<p>}<br>
3.<?xml version="1.0" encoding="UTF-8"?><br>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"></p>
<pre><code>&lt;bean id=&quot;address&quot; class=&quot;com.deng.pojo.Address&quot;/&gt;
&lt;bean id=&quot;student&quot; class=&quot;com.deng.pojo.Student&quot;&gt;
    &lt;!--    第一种，普通类，直接注入value--&gt;
    &lt;property name=&quot;name&quot; value=&quot;贝爷&quot;/&gt;
    &lt;!--    第二种，bean类，注入ref--&gt;
    &lt;property name=&quot;address&quot; ref=&quot;address&quot;/&gt;
    &lt;!--    第三种，数组--&gt;
    &lt;property name=&quot;books&quot;&gt;
        &lt;array&gt;
            &lt;value&gt; 红楼梦&lt;/value&gt;
            &lt;value&gt; 水浒传&lt;/value&gt;
            &lt;value&gt; 平凡的世界&lt;/value&gt;
            &lt;value&gt;明朝那些事儿&lt;/value&gt;
        &lt;/array&gt;
    &lt;/property&gt;
       &lt;!-- 第四种，list--&gt;
    &lt;property name=&quot;hobby&quot;&gt;
        &lt;list&gt;
            &lt;value&gt; 听歌&lt;/value&gt;
            &lt;value&gt; 打游戏&lt;/value&gt;
            &lt;value&gt; 敲代码&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
       &lt;!--第五种，Map--&gt;
    &lt;property name=&quot;card&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;身份证&quot; value=&quot;362501200105266618&quot;/&gt;
            &lt;entry key=&quot;银行卡&quot; value=&quot;200165165151651065&quot;/&gt;
        &lt;/map&gt;
    &lt;/property&gt;
     &lt;!--Set--&gt;
    &lt;property name=&quot;games&quot;&gt;
        &lt;set&gt;
            &lt;value&gt;LOL&lt;/value&gt;
            &lt;value&gt;COC&lt;/value&gt;
            &lt;value&gt;BOB&lt;/value&gt;
        &lt;/set&gt;
    &lt;/property&gt;
    &lt;!--空指针--&gt;
   &lt;!--&lt;property name=&quot;wife&quot; value=&quot;&quot;/&gt;空值--&gt;
    &lt;property name=&quot;wife&quot;&gt;
        &lt;null/&gt;&lt;!--空指针--&gt;
    &lt;/property&gt;
    &lt;property name=&quot;info&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;学号&quot;&gt;201908130310&lt;/prop&gt;
            &lt;prop key=&quot;性别&quot;&gt;男性&lt;/prop&gt;
            &lt;prop key=&quot;班级&quot;&gt; 软件1903班&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>
</beans>
<p>3.测试结果<br>
import com.deng.pojo.Student;<br>
import org.springframework.context.support.ClassPathXmlApplicationContext;</p>
<p>public class MyTrxt {<br>
public static void main(String[] args) {<br>
ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);<br>
Student student=(Student) context.getBean(&quot;student&quot;);<br>
System.out.println(student.toString());<br>
}<br>
}<br>
//    Student{<br>
//    name='贝爷',<br>
//    address=Address{address='长沙'},<br>
//    books=[ 红楼梦,  水浒传,  平凡的世界, 明朝那些事儿],<br>
//    hobby=[ 听歌,  打游戏,  敲代码],<br>
//    card={身份证=362501200105266618, 银行卡=200165165151651065},<br>
//    games=[LOL, COC, BOB],<br>
//    info={学号=201908130310, 性别=男性, 班级=软件1903班},<br>
//    wife='null'<br>
//    }<br>
4.拓展方式注入<br>
可以运用p/c命名空间进行注入</p>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"><br>
<!-- p命名空间注入，可以直接注入属性值,proprety--><br>
<bean id="user" class="com.deng.pojo.User" p:name="贝爷" p:age="21"/><br>
<!--c命名空间注入，通过构造器注入，construct-args--><br>
<bean id="user2" class="com.deng.pojo.User" c:name="黄皮耗子" c:age="3"/><br>
</beans><br>
测试：<br>
@Test<br>
public void text2(){<br>
ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(&quot;Userbeans.xml&quot;);<br>
User user=(User) context.getBean(&quot;user2&quot;);<br>
System.out.println(user);<br>
}<br>
注意：<br>
要导入<br>
xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br>
xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<br>
这两个约束。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring配置]]></title>
        <id>https://2651560750.github.io/post/spring-pei-zhi/</id>
        <link href="https://2651560750.github.io/post/spring-pei-zhi/">
        </link>
        <updated>2021-03-20T11:39:51.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://2651560750.github.io/post-images/1616240506290.png" alt="" loading="lazy"></figure>
<ol>
<li>alias：<!-- 别名，我们也可以通过别名来获取对象   --><br>
<alias name="user" alias="user2"/><br>
2.bean的配置：</li>
</ol>
 <!--  id:bean的唯一标识符，也就是java中的对象名  -->
<!--   class:bean对象所对应的全限定名：包名+类名-->
<!--    name： 也是别名，但是他可以生成多个别名-->
<pre><code>&lt;bean id=&quot;user&quot; class=&quot;com.deng.pojo.User&quot; name=&quot;user3,user4,user5,user6&quot;/&gt;
</code></pre>
<p>3.import：多用于团队开发，可以将多个文件中的bean整合到一个bean中<br>
<import resource="beans.xml"/><br>
<import resource="beans2.xml"/></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring中三种创建对象的方法]]></title>
        <id>https://2651560750.github.io/post/spring-zhong-san-chong-chuang-jian-dui-xiang-de-fang-fa/</id>
        <link href="https://2651560750.github.io/post/spring-zhong-san-chong-chuang-jian-dui-xiang-de-fang-fa/">
        </link>
        <updated>2021-03-20T11:18:02.000Z</updated>
        <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd"><br>
<bean id="user" class="com.deng.pojo.User"></p>
<!--        <constructor-arg index="0" value="com.邓贝"/> 有参构造函数之下标赋值法-->
<!--        <property name="name" value="邓贝"> 无参构造函数-->
<!--直接通过参数名赋值-->
<pre><code>    &lt;constructor-arg name=&quot;name&quot; value=&quot;贝爷&quot;/&gt;
&lt;/bean&gt;
</code></pre>
</beans>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[标签的基本用法]]></title>
        <id>https://2651560750.github.io/post/biao-qian-de-ji-ben-yong-fa/</id>
        <link href="https://2651560750.github.io/post/biao-qian-de-ji-ben-yong-fa/">
        </link>
        <updated>2021-03-20T06:32:09.000Z</updated>
        <content type="html"><![CDATA[<p>基本</p>
<html>…</html>      定义 HTML 文档
<head>…</head>   文档的信息
<meta>                    HTML 文档的元信息
<title>…</title>        文档的标题
<link>                      文档与外部资源的关系
<style>…</style>    文档的样式信息
<body>…</body>   可见的页面内容
<!--…-->                 注释
<p>文本</p>
<h1>...</h1>               标题字大小（h1~h6）
<p><b>...</b>                   粗体字</p>
<p><strong>...</strong>   粗体字(强调)</p>
<p><i>...</i>                      斜体字</p>
<p><em>...</em>              斜体字(强调)</p>
<center>…</center>   居中文本
<ul>…</ul>                 无序列表 
<ol>…</ol>                 有序列表
<li>…</li>                    列表项目
<p><a href=”…”>…</a>    超链接</p>
<p><font>                         定义文本字体尺寸、颜色、大小</p>
<p><sub>                         下标</p>
<p><sup>                         上标</p>
<p><br>                           换行</p>
<p>                            段落
<p>图形<br>
<img src=’”…”>   定义图像</p>
<hr>                   水平线
<p><del>                  加删除线</p>
<p>表格</p>
<table>…</table>   定义表格
<th>…</th>            定义表格中的表头单元格
<tr>…</tr>             定义表格中的行
<td>…</td>           定义表格中的单元
<p>其它</p>
<form>…</form>    定义供用户输入的 HTML 表单
<frame>                 定义框架集的窗口或框架
<p>转义字符</p>
<p>&lt; &lt;</p>
<blockquote>
<p>&gt;<br>
空格  <br>
© ©<br>
® ®<br>
™ ™</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[封装]]></title>
        <id>https://2651560750.github.io/post/feng-zhuang/</id>
        <link href="https://2651560750.github.io/post/feng-zhuang/">
        </link>
        <updated>2021-03-14T10:55:19.000Z</updated>
        <content type="html"><![CDATA[<p>使用private<br>
使用private修饰成员变量时，如果需要获取该值需要定义一个get成员变量名方法，get方法需要有返回值，返回值类型与成员变量相同；如果需要设置该值需要定义set成员变量名方法，set方法需要有参数，参数类型与成员变量相同。<br>
注意：boolean的Getter方法为is成员变量名。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://2651560750.github.io/post/hello-gridea/</id>
        <link href="https://2651560750.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>